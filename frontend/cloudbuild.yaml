steps:
  - id: run-accessibility-scan
    name: 'gcr.io/cloud-builders/docker@sha256:b991d50960b337f581ad77ea2a59259a786d177019aa64d8b3acb01f65dbc154'
    dir: ./
    script: |
      #!/bin/bash
      set -o errexit
      set -o pipefail
      set -o nounset

      # fix permission issues when running the axe tests, need to be able to write to ./axe-results/*.json
      mkdir -p ./devsecops/a11y-testing/axe-results
      chmod -R 777 ./devsecops/a11y-testing/axe-results

      # Run docker compose dev environment, detached mode 
      docker compose -f ./docker-compose.axe.yaml up -d --build 

      # Wait for the axe-testing container to finish
      docker compose -f ./docker-compose.axe.yaml wait axe-testing

  - id: upload-axe-results-to-gcs
    name: 'gcr.io/cloud-builders/gsutil@sha256:386bf19745cfa9976fc9e7f979857090be9152b30bf3f50527c6ace1de9d2673'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # fallback values for local or improperly set environments
        if [[ -z "$BRANCH_NAME" ]]; then export BRANCH_NAME="unknown_branch"; fi
        if [[ -z "$COMMIT_SHA" ]]; then export COMMIT_SHA="unknown_sha"; fi

        gsutil cp /workspace/devsecops/a11y-testing/axe-results/ci_axe_results_*.json \
        gs://pelias-devsecops-outputs-for-dashboard/axe-ci-results/$BRANCH_NAME-$COMMIT_SHA.json

  - id: clean-up-axe-a11y-testing-environment
    name: 'gcr.io/cloud-builders/docker@sha256:b991d50960b337f581ad77ea2a59259a786d177019aa64d8b3acb01f65dbc154'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker compose -f ./docker-compose.axe.yaml down -v

  # Generate the Docker image name and save to a workspace file
  - name: 'gcr.io/cloud-builders/docker'
    id: generate-image-name
    entrypoint: 'bash'
    dir: frontend
    args:
      - '-c'
      - |
        if [[ "$BRANCH_NAME" == "main" ]]
        then
          echo "northamerica-northeast1-docker.pkg.dev/${PROJECT_ID}/pelias-geocoder/ui:$BRANCH_NAME-$SHORT_SHA-$(date +%s)" > /workspace/imagename
        else
          exit 0
        fi

  # Build the Docker image if the branch is 'main'
  - name: 'gcr.io/cloud-builders/docker'
    id: build-if-main
    entrypoint: 'bash'
    dir: frontend
    args:
      - '-c'
      - |
        if [[ "$BRANCH_NAME" == "main" ]]
        then
          image=$(cat /workspace/imagename)
          docker build -t $image -f ./Dockerfile .
        else
          exit 0
        fi

  # Push the Docker image to the registry if the branch is 'main'
  - name: 'gcr.io/cloud-builders/docker'
    id: push-if-main
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [[ "$BRANCH_NAME" == "main" ]]
        then
          image=$(cat /workspace/imagename)
          docker push $image
        else
          exit 0
        fi

  - id: get-and-save-artifact-registry-image-digest-if-main
    # This is a workaround to help filter only current image vulnerabilities for devcheck dashboard - we need the AR image digest for this.
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest@sha256:3a24ff5f089d9ce3627306873ef1e1061488a63ae12c0bd0b5c24ec5ee594798'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [[ $BRANCH_NAME == "main" ]]
        then
          # Get all images from Artifact Registry, sort by create time
          artifact_registry_digests="$(gcloud artifacts files list \
            --project=$PROJECT_ID \
            --repository=pelias-geocoder \
            --location=northamerica-northeast1 \
            --package=ui \
            --sort-by=~CREATE_TIME)"

          # Get most recent image's short sha, use in filename and save to bucket
          most_recent_sha=$(echo "${artifact_registry_digests}" | sed -n 's/.*sha256:\([a-f0-9]\{12\}\).*/\1/p' | head -n 1)
          file_name="gs://safe-inputs-devsecops-outputs-for-dashboard/artifact-registry-image-digests/ui__${most_recent_sha}.txt"
          echo "${most_recent_sha}" | gsutil cp - "${file_name}"
        else
          exit 0
        fi
